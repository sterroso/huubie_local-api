// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(uuid())
  email             String    @unique
  password          String
  first_name        String?
  middle_name       String?
  last_name         String?
  avatar_url        String?
  role_id           String?
  entity_id         String?
  role              Role?     @relation(fields: [role_id], references: [id])
  entity            Entity?   @relation(fields: [entity_id], references: [id])
  employee          Employee?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        String?

  @@index([deleted])
  @@map("users")
}

model Role {
  id                String    @id @default(uuid())
  name              String    @unique
  users             User[]
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  deleted           Boolean   @default(false)
  deleted_at        DateTime?
  deleted_by        String?

  @@index([deleted])
  @@map("roles")
}

model Entity {
  id                    String    @id @default(uuid())
  legal_name            String
  tax_id                String
  address_line_one      String?
  address_line_two      String?
  users                 User[]
  branches              Branch[]
  positions             Position[]
  subscription_status   String?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("entities")
}

model Branch {
  id                    String    @id @default(uuid())
  name                  String    @default("Matriz")
  address_line_one      String?
  address_line_two      String?
  entity_id             String
  entity                Entity    @relation(fields: [entity_id], references: [id])
  shifts                Shift[]
  areas                 Area[]
  employees             Employee[]
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("branches")
}

model Position {
  id                    String    @id @default(uuid())
  title                 String
  description           String?
  entity_id             String
  entity                Entity    @relation(fields: [entity_id], references: [id])
  employees             Employee[]
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("positions")
}

model Shift {
  id                    String    @id @default(uuid())
  name                  String    @default("Ãšnico")
  branch_id             String
  branch                Branch    @relation(fields: [branch_id], references: [id])
  start_time            DateTime?
  end_time              DateTime?
  hours                 Float?
  employees             Employee[]
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("shifts")
}

model Area {
  id                    String    @id @default(uuid())
  name                  String
  branch_id             String
  branch                Branch    @relation(fields: [branch_id], references: [id])
  employees             Employee[]
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("areas")
}

model Employee {
  id                    String    @id @default(uuid())
  first_name            String
  middle_name           String?
  last_name             String
  branch_id             String
  branch                Branch    @relation(fields: [branch_id], references: [id])
  area_id               String?
  area                  Area?     @relation(fields: [area_id], references: [id])
  position_id           String?
  position              Position? @relation(fields: [position_id], references: [id])
  shift_id              String?
  shift                 Shift?    @relation(fields: [shift_id], references: [id])
  manager_id            String?
  manager               Employee?   @relation("manager-employees", fields: [manager_id], references: [id])
  employees             Employee[]  @relation("manager-employees")
  user_id               String?   @unique
  user                  User?     @relation(fields: [user_id], references: [id])
  documents             EmployeeDocument[]
  address_line_one      String?
  address_line_two      String?
  address_city          String?
  address_state         String?
  address_zip_code      String?
  is_manager            Boolean   @default(false)
  email                 String?
  telephone_number      String?
  tax_id                String?
  date_of_birth         DateTime?
  city_of_birth         String?
  gender                String?
  study                 String?
  id_document_type      String?
  id_document_number    String?
  citizen_id_number     String?
  ssn                   String?
  ssn_issue_date        DateTime?
  pay_cadence           String?
  daily_wage            BigInt?
  attendance_bonus      BigInt?
  other_bonus           BigInt?
  incentives            BigInt?
  complimentary_payroll BigInt?
  regular_payroll       BigInt?
  bank_name             String?
  bank_account_number   String?
  date_of_hire          DateTime
  date_of_termination   DateTime?
  status                String?
  housing_credit_number String?
  has_social_security   Boolean   @default(false)
  has_housing_credit    Boolean   @default(false)
  id_document_copy      Boolean   @default(false)
  citizen_id_copy       Boolean   @default(false)
  job_application_form  Boolean   @default(false)
  proof_of_address      Boolean   @default(false)
  proof_of_studies      Boolean   @default(false)
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("employees")
}

model EmployeeDocument {
  id                    String    @id @default(uuid())
  employee_id           String
  employee              Employee  @relation(fields: [employee_id], references: [id])
  name                  String
  url                   String
  description           String?
  update_before         DateTime?
  created_at            DateTime  @default(now())
  updated_at            DateTime  @updatedAt
  deleted               Boolean   @default(false)
  deleted_at            DateTime?
  deleted_by            String?

  @@index([deleted])
  @@map("employee_documents")
}
